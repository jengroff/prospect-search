# docker-compose.yml

version: "3.8"

# the database service uses a base postgres image without adding any new commands,
# which means we don't need a "db" directory or db-specific Dockerfile
# it also mops port 5432 locally

# using 'volumes' in both services lets us store data outside of the container lifecycle.
# otherwise, when we stop the Docker container and start it again, everything would
# recreated from scratch from the image

services:

  database:
    container_name: prospect-database
    environment:
      - POSTGRES_DB=prospectdb
      - POSTGRES_USER=prospectdb
      - POSTGRES_PASSWORD=prospectdb
    image: postgres:13.2
    ports:
      - 5433:5432
    expose:
      - 5432
    volumes:
      - prospect-database:/var/lib/postgresql/data


# the 'environment' property defines env variables to be used in the
#  server container's runtime environment

  server:
    build:
      context: ./server
    container_name: prospect-server
    depends_on:
      - database
    environment:
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=prospectdb
      - SQL_USER=prospectdb
      - SQL_PASSWORD=prospectdb
      - SQL_HOST=prospect-database
      - SQL_PORT=5432
    command: [ "bash", "start.sh" ]
    ports:
      - 8003:8000
    volumes:
      - ./server:/usr/src/app

volumes:
  prospect-database: